name: Deploy AWS Infrastructure

on:
  push:
    branches:
      - infra-terraform

env:
  AWS_REGION: us-east-2
  ENVIRONMENT: dev
  TF_STATE_BUCKET: "Drazex-terraform-statefiles"
  TF_STATE_LOCK_TABLE: "terraform-state-lock"

jobs:
  check-backend:
    name: Check Backend Infrastructure
    runs-on: ubuntu-latest
    outputs:
      backend_exists: ${{ steps.check-resources.outputs.exists }}
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if resources exist
        id: check-resources
        run: |
          if aws s3api head-bucket --bucket ${{ env.TF_STATE_BUCKET }} 2>/dev/null && \
             aws dynamodb describe-table --table-name ${{ env.TF_STATE_LOCK_TABLE }} 2>/dev/null; then
            echo "Resources exist"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Resources don't exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  terraform-backend:
    name: Setup Backend Infrastructure
    needs: check-backend
    if: needs.check-backend.outputs.backend_exists == 'false'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra/environments/backend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply tfplan

  terraform-validate:
    name: Validate Terraform
    needs: [check-backend]
    if: always()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform_directories:
          - ./infra/environments/dev/vpc
          - ./infra/environments/dev/alb
          - ./infra/environments/dev/ecs
          - ./infra/environments/dev/microservices

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ${{ matrix.terraform_directories }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ${{ matrix.terraform_directories }}
        run: terraform validate

  terraform-vpc:
    name: Deploy VPC
    needs: [check-backend, terraform-validate]
    if: always() && needs.terraform-validate.result == 'success'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra/environments/dev/vpc

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_LOCK_TABLE }}"

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply tfplan

  terraform-alb:
    name: Deploy ALB
    needs: terraform-vpc
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra/environments/dev/alb

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_LOCK_TABLE }}"

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply tfplan

  terraform-ecs:
    name: Deploy ECS
    needs: terraform-alb
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra/environments/dev/ecs

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_LOCK_TABLE }}"

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply tfplan

  terraform-microservices:
    name: Deploy Microservices
    needs: terraform-ecs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra/environments/dev/microservices

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_LOCK_TABLE }}"

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply tfplan